#import 'sandbox.js'
#import 'objc-config.js'
#import 'common.js'

var swatchLayers = getSwatchLayers();

var methodSignatures = [];
var uicolorCodes = [];

var prefix = [doc askForUserInput:"What is your category prefix?" initialValue:"skc_"];

for (var i=0; i < [swatchLayers count]; i++)
{
  var layer = [swatchLayers objectAtIndex:i];

  if ([layer isMemberOfClass:[MSShapeGroup class]])
  {
    var swatchName = layer.name();

    if (swatchName != "untitled color")
    {
      swatchName = makeNiceName(swatchName);

      methodSignatures.push(generateMethodSignature(swatchName, prefix));
      uicolorCodes.push(generateFillColor(layer));
    }
  }
}

var mText = commentHeader + mPrefix;
var hText = commentHeader + hPrefix;

for (var i=0; i < methodSignatures.length; i++)
{

  mText += methodSignatures[i];
  mText += newLine;
  mText += "{";
  mText += newLine;
  mText += "\t" + uicolorCodes[i];
  mText += newLine;
  mText += "}";
  mText += newLine;
  mText += newLine;

  hText += methodSignatures[i] + ";";
  hText += newLine;
  hText += newLine;
}

mText += end;
hText += end;

var mPath = getDocumentPath() + "UIColor+Sketch.m";
var hPath = getDocumentPath() + "UIColor+Sketch.h";

saveFile(mPath, mText);
saveFile(hPath, hText);

function generateMethodSignature(name, prefix)
{
    return "+(UIColor *) " + prefix + name;
}

function generateFillColor(layer)
{
  var fill = layer.style().fills().firstObject();
  var red = fill.color().red().toFixed(3).toString();
  var green = fill.color().green().toFixed(3).toString();
  var blue = fill.color().blue().toFixed(3).toString();
  var alpha = fill.color().alpha().toFixed(3).toString();

  return "return [UIColor colorWithRed:" + red + " green:" + green + " blue:" + blue + " alpha:" + alpha + "];";
}
