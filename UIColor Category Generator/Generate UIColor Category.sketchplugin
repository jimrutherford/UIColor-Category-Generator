#import 'sandbox.js'
#import 'config.js'

var fileUrl = doc.fileURL();
var filePath = fileUrl.path();

var targetFolder = filePath.split(doc.displayName())[0];
log ("Document Path = " + targetFolder);

var mPath = targetFolder + "UIColor+Sketch.m";
var hPath = targetFolder + "UIColor+Sketch.h";

var pages = [doc pages];

var swatchPage;

for (var i=0; i < [pages count]; i++)
{
  if (pages[i].name() == "Color Swatch")
  {
    swatchPage = pages[i];
    break;
  }
}

var swatchLayers = [swatchPage layers];

var methodSignatures = [];
var uicolorCodes = [];

var prefix = [doc askForUserInput:"What is your category prefix?" initialValue:"skc_"];

for (var i=0; i < [swatchLayers count]; i++)
{
  var layer = [swatchLayers objectAtIndex:i];

  if ([layer isMemberOfClass:[MSShapeGroup class]])
  {
    var swatchName = layer.name();

    if (swatchName != "untitled color")
    {
      swatchName = makeNiceName(swatchName);

      methodSignatures.push(generateMethodSignature(swatchName, prefix));


      uicolorCodes.push(generateFillColor(layer));

    }
  }
}

var mText = commentHeader + mPrefix;
var hText = commentHeader + hPrefix;

for (var i=0; i < methodSignatures.length; i++)
{

  mText += methodSignatures[i];
  mText += newLine;
  mText += "{";
  mText += newLine;
  mText += "\t" + uicolorCodes[i];
  mText += newLine;
  mText += "}";
  mText += newLine;
  mText += newLine;

  hText += methodSignatures[i] + ";";
  hText += newLine;
  hText += newLine;
}

mText += end;
hText += end;

saveFile(targetFolder, mPath, mText);
saveFile(targetFolder, hPath, hText);

function generateMethodSignature(name, prefix)
{
    return "+(UIColor *) " + prefix + name;
}

function saveFile(folder, filename, content)
{
    var path = [@"" stringByAppendingString:filename];
    var str = [@"" stringByAppendingString:content];

    if (in_sandbox()) {
        sandboxAccess.accessFilePath_withBlock_persistPermission(folder, function(){
            [str writeToFile:path atomically:true encoding:NSUTF8StringEncoding error:null];
        }, true)
    } else {
        [str writeToFile:path atomically:true encoding:NSUTF8StringEncoding error:null];
    }
}

function makeNiceName(str)
{
    var result;

    // make title case
    result = str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1);});

    // strip spaces from layer names
    result = result.replace(/ /g,'');

    // get rid of special characters
    result = result.replace(/[^\w\s]/gi, '');

    return result;
}

function generateFillColor(layer)
{
  var fill = layer.style().fills().firstObject();
  var red = fill.color().red().toFixed(3).toString();
  var green = fill.color().green().toFixed(3).toString();
  var blue = fill.color().blue().toFixed(3).toString();
  var alpha = fill.color().alpha().toFixed(3).toString();

  return "return [UIColor colorWithRed:" + red + "f green:" + green + "f blue:" + blue + "f alpha:" + alpha + "f];";
}
